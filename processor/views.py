import shutil

import openpyxl
import os

import pandas as pd
import json
import requests
from django.shortcuts import render, redirect, get_object_or_404
from django.http import FileResponse, Http404
from .forms import UploadFileForm
from .models import UploadedFile
from django.conf import settings


def upload_and_list_files(request):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    current_file = UploadedFile.objects.filter(is_current=True).first()
    processed_filename = None

    # üßº –ß–∏—Å—Ç–∏–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if current_file and not os.path.exists(current_file.file.path):
        current_file.delete()
        current_file = None

    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            UploadedFile.objects.filter(is_current=True).delete()
            new_file = form.save(commit=False)
            new_file.is_current = True
            new_file.save()
            return redirect("home")
    else:
        form = UploadFileForm()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if current_file:
        base_name = os.path.splitext(os.path.basename(current_file.file.name))[0]
        final_name = f"{base_name}_final.xlsx"
        final_path = os.path.join(settings.BASE_DIR, "uploads", final_name)
        if os.path.exists(final_path):
            processed_filename = final_name

    chatgpt_table = request.session.pop("chatgpt_table", None)

    return render(request, "processor/index.html", {
        "form": form,
        "current_file": current_file,
        "processed_filename": processed_filename,
        "chatgpt_table": chatgpt_table,  # üëà –¥–æ–±–∞–≤–∏–ª–∏
    })


def upload_file(request):
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect("file_list")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    else:
        form = UploadFileForm()
    return render(request, "processor/upload.html", {"form": form})


def process_xlsx(file_path):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç Excel-—Ñ–∞–π–ª, —É–¥–∞–ª—è–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª."""
    wb = openpyxl.load_workbook(file_path)

    for sheet in wb.worksheets:
        # –£–¥–∞–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        hidden_rows = [row for row in sheet.row_dimensions if sheet.row_dimensions[row].hidden]
        for row in sorted(hidden_rows, reverse=True):
            sheet.delete_rows(row)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file_path = file_path.replace(".xlsx", "_temp.xlsx")
    wb.save(temp_file_path)

    # –ß–∏—Ç–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —á–µ—Ä–µ–∑ pandas (—É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN)
    df = pd.read_excel(temp_file_path)
    df = df.dropna(how="all")  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ
    df = df.dropna(axis=1, how="all") # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã, –≥–¥–µ –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(temp_file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    new_file_path = file_path.replace(".xlsx", "_processed.xlsx")
    df.to_excel(new_file_path, index=False)

    return new_file_path


def file_list(request):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã + –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ."""

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏
    all_uploaded = UploadedFile.objects.all()
    existing_uploaded_files = [
        f for f in all_uploaded if os.path.exists(f.file.path)
    ]

    # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ /uploads/
    uploads_dir = os.path.join(settings.BASE_DIR, "uploads")
    processed_files = []
    if os.path.exists(uploads_dir):
        for filename in os.listdir(uploads_dir):
            if "_final" in filename and filename.endswith(".xlsx"):
                processed_files.append(filename)

    return render(request, "processor/file_list.html", {
        "files": existing_uploaded_files,
        "processed_files": processed_files,
    })


def convert_xlsx_to_text(file_path):
    """–ß–∏—Ç–∞–µ—Ç .xlsx, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ JSON (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)."""
    df = pd.read_excel(file_path)
    return df.to_json(orient="records", force_ascii=False, indent=4)  # JSON —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤


def convert_text_to_xlsx(json_text, output_path):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ .xlsx."""
    try:
        data = json.loads(json_text)
        df = pd.DataFrame(data)
        df.to_excel(output_path, index=False)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
        return None


def apply_priorities_from_chatgpt(original_path, chatgpt_path):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç' –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ ChatGPT,
    –≥–¥–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∏ '‚Ññ' –∏ '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'.
    """
    original_df = pd.read_excel(original_path)
    chatgpt_df = pd.read_excel(chatgpt_path)

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å
    if "‚Ññ" not in original_df.columns or "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" not in chatgpt_df.columns:
        print("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–∞–π–ª–æ–≤.")
        return None

    # –°–æ–∑–¥–∞—ë–º –º–∞–ø–ø–∏–Ω–≥: ‚Ññ ‚Üí –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    priority_mapping = chatgpt_df.set_index("‚Ññ")["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"].to_dict()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    original_df["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"] = original_df["‚Ññ"].map(priority_mapping).combine_first(original_df["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    final_path = original_path.replace(".xlsx", "_final.xlsx")
    original_df.to_excel(final_path, index=False)


def send_to_chatgpt(text_data, prompt):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ ChatGPT API –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π JSON."""
    url = "https://api.proxyapi.ru/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {os.getenv('PROXYAPI_KEY')}",
        "Content-Type": "application/json",
    }

    messages = [
        {"role": "developer", "content": f"{prompt}"},
        {"role": "user", "content": f"–î–∞–Ω–Ω—ã–µ:\n{text_data}"}
    ]

    payload = {
        "model": "gpt-4o-mini",
        "messages": messages,
    }

    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]

    return None


def process_with_chatgpt(request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
    uploaded_file = UploadedFile.objects.filter(is_current=True).first()
    if not uploaded_file:
        return render(request, "processor/error.html", {"message": "–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."})

    original_file_path = uploaded_file.file.path
    processed_file_path = process_xlsx(original_file_path)

    text_data = convert_xlsx_to_text(processed_file_path)
    prompt = settings.CHATGPT_PROMPT
    processed_text = send_to_chatgpt(text_data, prompt)

    if processed_text:
        chatgpt_path = original_file_path.replace(".xlsx", "_chatgpt.xlsx")
        result = convert_text_to_xlsx(processed_text, chatgpt_path)

        if result:
            apply_priorities_from_chatgpt(original_file_path, chatgpt_path)
            try:
                parsed_data = json.loads(processed_text)
                request.session['chatgpt_table'] = parsed_data
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT:", e)

    return redirect("home")
