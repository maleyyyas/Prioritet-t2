import re
import shutil

import openpyxl
import os

import pandas as pd
import json
import requests
from django.shortcuts import render, redirect, get_object_or_404
from django.http import FileResponse, Http404
from .forms import UploadFileForm
from .models import UploadedFile
from django.conf import settings
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.worksheet.worksheet import Worksheet


def upload_and_list_files(request):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    current_file = UploadedFile.objects.filter(is_current=True).first()
    processed_filename = None

    # üßº –ß–∏—Å—Ç–∏–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if current_file and not os.path.exists(current_file.file.path):
        current_file.delete()
        current_file = None

    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            UploadedFile.objects.filter(is_current=True).delete()
            new_file = form.save(commit=False)
            new_file.is_current = True
            new_file.save()
            return redirect("home")
        # üîª –µ—Å–ª–∏ form –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ ‚Äî –º—ã –ø—Ä–æ—Å—Ç–æ "–ø–∞–¥–∞–µ–º" –¥–∞–ª—å—à–µ –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω —Å –æ—à–∏–±–∫–∞–º–∏
    else:
        form = UploadFileForm()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if current_file:
        base_name = os.path.splitext(os.path.basename(current_file.file.name))[0]
        final_name = f"{base_name}_final.xlsx"
        final_path = os.path.join(settings.BASE_DIR, "uploads", final_name)
        if os.path.exists(final_path):
            processed_filename = final_name

    chatgpt_table = request.session.pop("chatgpt_table", None)

    return render(request, "processor/index.html", {
        "form": form,
        "current_file": current_file,
        "processed_filename": processed_filename,
        "chatgpt_table": chatgpt_table,  # üëà –¥–æ–±–∞–≤–∏–ª–∏
    })


def upload_file(request):
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect("file_list")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    else:
        form = UploadFileForm()
    return render(request, "processor/upload.html", {"form": form})


def process_xlsx(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel-—Ñ–∞–π–ª, —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–æ–ª–æ–Ω–∫–µ '‚Ññ',
    —É–¥–∞–ª—è–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã,
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª.
    """
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    df = pd.read_excel(file_path)

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–æ–ª–æ–Ω–∫–µ "‚Ññ", –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    if "‚Ññ" in df.columns:
        df = df.drop_duplicates(subset="‚Ññ", keep="first")

    columns_to_remove = ["–®–∞–≥", "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è/–≤–æ–ø—Ä–æ—Å—ã", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è/–≤–æ–ø—Ä–æ—Å—ã (–∞–Ω–∞–ª–∏—Ç–∏–∫)"]
    df = df.drop(columns=[col for col in columns_to_remove if col in df.columns])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    new_file_path = file_path.replace(".xlsx", "_processed.xlsx")
    df.to_excel(new_file_path, index=False)

    return new_file_path


def file_list(request):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã + –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ."""

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏
    all_uploaded = UploadedFile.objects.all()
    existing_uploaded_files = [
        f for f in all_uploaded if os.path.exists(f.file.path)
    ]

    # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ /uploads/
    uploads_dir = os.path.join(settings.BASE_DIR, "uploads")
    processed_files = []
    if os.path.exists(uploads_dir):
        for filename in os.listdir(uploads_dir):
            if "_final" in filename and filename.endswith(".xlsx"):
                processed_files.append(filename)

    return render(request, "processor/file_list.html", {
        "files": existing_uploaded_files,
        "processed_files": processed_files,
    })


def convert_xlsx_to_text(file_path):
    """–ß–∏—Ç–∞–µ—Ç .xlsx, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ JSON (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)."""
    df = pd.read_excel(file_path)
    return df.to_json(orient="records", force_ascii=False, indent=4)  # JSON —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤


def convert_text_to_xlsx(json_text, output_path):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON-–º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ .xlsx."""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        data = json.loads(json_text)
        df = pd.DataFrame(data)
        df.to_excel(output_path, index=False)
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
        return None


def apply_priorities_from_chatgpt(original_path, chatgpt_path):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫."""
    original_df = pd.read_excel(original_path)
    chatgpt_df = pd.read_excel(chatgpt_path)

    if "‚Ññ" not in original_df.columns or "–û—Ç–≤–µ—Ç—ã" not in chatgpt_df.columns:
        print("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–∞–π–ª–æ–≤.")
        return None

    # –ú–∞–ø–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    priority_mapping = chatgpt_df.set_index("‚Ññ")["–û—Ç–≤–µ—Ç—ã"].to_dict()
    original_df["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"] = original_df["‚Ññ"].map(priority_mapping)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    wb = load_workbook(original_path)
    ws: Worksheet = wb.active

    # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é –∫–æ–ª–æ–Ω–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
    gpt_col_idx = ws.max_column + 1
    ws.cell(row=1, column=gpt_col_idx, value="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç")

    # –°—Ç—Ä–æ–∏–º –º–∞–ø–ø–∏–Ω–≥ "‚Ññ" ‚Üí –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    num_col_index = None
    for col_idx, cell in enumerate(ws[1], 1):
        if str(cell.value).strip() == "‚Ññ":
            num_col_index = col_idx
            break

    if not num_col_index:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '‚Ññ'")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
        row_num_cell = row[num_col_index - 1]
        row_num_value = row_num_cell.value
        priority = priority_mapping.get(row_num_value)
        if priority is not None:
            ws.cell(row=row_num_cell.row, column=gpt_col_idx, value=priority)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
    final_path = original_path.replace(".xlsx", "_final.xlsx")
    wb.save(final_path)
    return final_path


def send_to_chatgpt(text_data, prompt):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ ChatGPT API –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π JSON."""
    url = "https://api.proxyapi.ru/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {os.getenv('PROXYAPI_KEY')}",
        "Content-Type": "application/json",
    }

    messages = [
        {"role": "developer", "content": f"{prompt}"},
        {"role": "user", "content": f"–î–∞–Ω–Ω—ã–µ:\n{text_data}"}
    ]

    payload = {
        "model": "gpt-4o-mini",
        "messages": messages,
    }

    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 200:
        text = response.json()["choices"][0]["message"]["content"]
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî –æ—Ç –ø–µ—Ä–≤–æ–π [ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π ]
        match = re.search(r'\[.*]', text, re.DOTALL)
        if not match:
            return text

        cleaned_json = match.group(0)

        return cleaned_json

    return None


def process_with_chatgpt(request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
    uploaded_file = UploadedFile.objects.filter(is_current=True).first()
    if not uploaded_file:
        return render(request, "processor/error.html", {"message": "–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."})

    original_file_path = uploaded_file.file.path
    processed_file_path = process_xlsx(original_file_path)

    text_data = convert_xlsx_to_text(processed_file_path)
    prompt = settings.CHATGPT_PROMPT
    processed_text = send_to_chatgpt(text_data, prompt)

    if processed_text:
        chatgpt_path = original_file_path.replace(".xlsx", "_chatgpt.xlsx")
        result = convert_text_to_xlsx(processed_text, chatgpt_path)

        if result:
            apply_priorities_from_chatgpt(original_file_path, chatgpt_path)
            try:
                parsed_data = json.loads(processed_text)

                # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥—ë–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
                priorities = set()
                for row in parsed_data:
                    if isinstance(row, dict):
                        p = row.get("–û—Ç–≤–µ—Ç—ã")
                        if isinstance(p, int):
                            priorities.add(p)

                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞ —Å–∫–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∞—Ç—å
                priority_shift = 0
                if 1 not in priorities:
                    if 2 not in priorities:
                        priority_shift = 2  # –Ω–∏ 1, –Ω–∏ 2
                    else:
                        priority_shift = 1  # –Ω–µ—Ç 1, –Ω–æ –µ—Å—Ç—å 2

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–¥–≤–∏–≥
                if priority_shift > 0:
                    for row in parsed_data:
                        if isinstance(row, dict) and isinstance(row.get("–û—Ç–≤–µ—Ç—ã"), int):
                            row["–û—Ç–≤–µ—Ç—ã"] = max(1, row["–û—Ç–≤–µ—Ç—ã"] - priority_shift)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
                request.session['chatgpt_table'] = parsed_data

            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT:", e)

    return redirect("home")
